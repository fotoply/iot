/*
 * generated by Xtext 2.17.0
 */
package org.xtext.sdu.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class IoTGrammarAccess extends AbstractGrammarElementFinder {
	
	public class SystemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sdu.IoT.System");
		private final Assignment cSystemAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cSystemAlternatives_0 = (Alternatives)cSystemAssignment.eContents().get(0);
		private final RuleCall cSystemSensorTypesParserRuleCall_0_0 = (RuleCall)cSystemAlternatives_0.eContents().get(0);
		private final RuleCall cSystemSensorParserRuleCall_0_1 = (RuleCall)cSystemAlternatives_0.eContents().get(1);
		private final RuleCall cSystemSensorGroupParserRuleCall_0_2 = (RuleCall)cSystemAlternatives_0.eContents().get(2);
		private final RuleCall cSystemSensorGetMethodParserRuleCall_0_3 = (RuleCall)cSystemAlternatives_0.eContents().get(3);
		private final RuleCall cSystemDeviceTypesParserRuleCall_0_4 = (RuleCall)cSystemAlternatives_0.eContents().get(4);
		private final RuleCall cSystemDeviceParserRuleCall_0_5 = (RuleCall)cSystemAlternatives_0.eContents().get(5);
		private final RuleCall cSystemDeviceGroupParserRuleCall_0_6 = (RuleCall)cSystemAlternatives_0.eContents().get(6);
		private final RuleCall cSystemServerTypesParserRuleCall_0_7 = (RuleCall)cSystemAlternatives_0.eContents().get(7);
		private final RuleCall cSystemServerFromTypeParserRuleCall_0_8 = (RuleCall)cSystemAlternatives_0.eContents().get(8);
		private final RuleCall cSystemServerParserRuleCall_0_9 = (RuleCall)cSystemAlternatives_0.eContents().get(9);
		private final RuleCall cSystemDestinationTypesParserRuleCall_0_10 = (RuleCall)cSystemAlternatives_0.eContents().get(10);
		private final RuleCall cSystemDestinationParserRuleCall_0_11 = (RuleCall)cSystemAlternatives_0.eContents().get(11);
		private final RuleCall cSystemFetchDataParserRuleCall_0_12 = (RuleCall)cSystemAlternatives_0.eContents().get(12);
		
		//System:
		//	system+=(SensorTypes | Sensor | SensorGroup | SensorGetMethod | DeviceTypes | Device | DeviceGroup | ServerTypes |
		//	ServerFromType | Server | DestinationTypes | Destination | FetchData)+;
		@Override public ParserRule getRule() { return rule; }
		
		//system+=(SensorTypes | Sensor | SensorGroup | SensorGetMethod | DeviceTypes | Device | DeviceGroup | ServerTypes |
		//ServerFromType | Server | DestinationTypes | Destination | FetchData)+
		public Assignment getSystemAssignment() { return cSystemAssignment; }
		
		//(SensorTypes | Sensor | SensorGroup | SensorGetMethod | DeviceTypes | Device | DeviceGroup | ServerTypes |
		//ServerFromType | Server | DestinationTypes | Destination | FetchData)
		public Alternatives getSystemAlternatives_0() { return cSystemAlternatives_0; }
		
		//SensorTypes
		public RuleCall getSystemSensorTypesParserRuleCall_0_0() { return cSystemSensorTypesParserRuleCall_0_0; }
		
		//Sensor
		public RuleCall getSystemSensorParserRuleCall_0_1() { return cSystemSensorParserRuleCall_0_1; }
		
		//SensorGroup
		public RuleCall getSystemSensorGroupParserRuleCall_0_2() { return cSystemSensorGroupParserRuleCall_0_2; }
		
		//SensorGetMethod
		public RuleCall getSystemSensorGetMethodParserRuleCall_0_3() { return cSystemSensorGetMethodParserRuleCall_0_3; }
		
		//DeviceTypes
		public RuleCall getSystemDeviceTypesParserRuleCall_0_4() { return cSystemDeviceTypesParserRuleCall_0_4; }
		
		//Device
		public RuleCall getSystemDeviceParserRuleCall_0_5() { return cSystemDeviceParserRuleCall_0_5; }
		
		//DeviceGroup
		public RuleCall getSystemDeviceGroupParserRuleCall_0_6() { return cSystemDeviceGroupParserRuleCall_0_6; }
		
		//ServerTypes
		public RuleCall getSystemServerTypesParserRuleCall_0_7() { return cSystemServerTypesParserRuleCall_0_7; }
		
		//ServerFromType
		public RuleCall getSystemServerFromTypeParserRuleCall_0_8() { return cSystemServerFromTypeParserRuleCall_0_8; }
		
		//Server
		public RuleCall getSystemServerParserRuleCall_0_9() { return cSystemServerParserRuleCall_0_9; }
		
		//DestinationTypes
		public RuleCall getSystemDestinationTypesParserRuleCall_0_10() { return cSystemDestinationTypesParserRuleCall_0_10; }
		
		//Destination
		public RuleCall getSystemDestinationParserRuleCall_0_11() { return cSystemDestinationParserRuleCall_0_11; }
		
		//FetchData
		public RuleCall getSystemFetchDataParserRuleCall_0_12() { return cSystemFetchDataParserRuleCall_0_12; }
	}
	public class SensorTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sdu.IoT.SensorType");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//SensorType:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class SensorTypesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sdu.IoT.SensorTypes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSensorTypesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypesSensorTypeParserRuleCall_1_0 = (RuleCall)cTypesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTypesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTypesSensorTypeParserRuleCall_2_1_0 = (RuleCall)cTypesAssignment_2_1.eContents().get(0);
		
		//SensorTypes:
		//	'SensorTypes' types+=SensorType (',' types+=SensorType)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'SensorTypes' types+=SensorType (',' types+=SensorType)*
		public Group getGroup() { return cGroup; }
		
		//'SensorTypes'
		public Keyword getSensorTypesKeyword_0() { return cSensorTypesKeyword_0; }
		
		//types+=SensorType
		public Assignment getTypesAssignment_1() { return cTypesAssignment_1; }
		
		//SensorType
		public RuleCall getTypesSensorTypeParserRuleCall_1_0() { return cTypesSensorTypeParserRuleCall_1_0; }
		
		//(',' types+=SensorType)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//types+=SensorType
		public Assignment getTypesAssignment_2_1() { return cTypesAssignment_2_1; }
		
		//SensorType
		public RuleCall getTypesSensorTypeParserRuleCall_2_1_0() { return cTypesSensorTypeParserRuleCall_2_1_0; }
	}
	public class SensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sdu.IoT.Sensor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSensorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cOfKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cTypeKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cTypeSensorTypeCrossReference_4_0 = (CrossReference)cTypeAssignment_4.eContents().get(0);
		private final RuleCall cTypeSensorTypeIDTerminalRuleCall_4_0_1 = (RuleCall)cTypeSensorTypeCrossReference_4_0.eContents().get(1);
		
		//Sensor:
		//	'Sensor' name=ID 'of' 'type' type=[SensorType];
		@Override public ParserRule getRule() { return rule; }
		
		//'Sensor' name=ID 'of' 'type' type=[SensorType]
		public Group getGroup() { return cGroup; }
		
		//'Sensor'
		public Keyword getSensorKeyword_0() { return cSensorKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'of'
		public Keyword getOfKeyword_2() { return cOfKeyword_2; }
		
		//'type'
		public Keyword getTypeKeyword_3() { return cTypeKeyword_3; }
		
		//type=[SensorType]
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }
		
		//[SensorType]
		public CrossReference getTypeSensorTypeCrossReference_4_0() { return cTypeSensorTypeCrossReference_4_0; }
		
		//ID
		public RuleCall getTypeSensorTypeIDTerminalRuleCall_4_0_1() { return cTypeSensorTypeIDTerminalRuleCall_4_0_1; }
	}
	public class SensorGroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sdu.IoT.SensorGroup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSensorGroupKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cIncludeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSensorsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cSensorsSensorCrossReference_4_0 = (CrossReference)cSensorsAssignment_4.eContents().get(0);
		private final RuleCall cSensorsSensorIDTerminalRuleCall_4_0_1 = (RuleCall)cSensorsSensorCrossReference_4_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cSensorsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cSensorsSensorCrossReference_5_1_0 = (CrossReference)cSensorsAssignment_5_1.eContents().get(0);
		private final RuleCall cSensorsSensorIDTerminalRuleCall_5_1_0_1 = (RuleCall)cSensorsSensorCrossReference_5_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//SensorGroup:
		//	'SensorGroup' name=ID 'include' '{' sensors+=[Sensor] (',' sensors+=[Sensor])* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'SensorGroup' name=ID 'include' '{' sensors+=[Sensor] (',' sensors+=[Sensor])* '}'
		public Group getGroup() { return cGroup; }
		
		//'SensorGroup'
		public Keyword getSensorGroupKeyword_0() { return cSensorGroupKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'include'
		public Keyword getIncludeKeyword_2() { return cIncludeKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//sensors+=[Sensor]
		public Assignment getSensorsAssignment_4() { return cSensorsAssignment_4; }
		
		//[Sensor]
		public CrossReference getSensorsSensorCrossReference_4_0() { return cSensorsSensorCrossReference_4_0; }
		
		//ID
		public RuleCall getSensorsSensorIDTerminalRuleCall_4_0_1() { return cSensorsSensorIDTerminalRuleCall_4_0_1; }
		
		//(',' sensors+=[Sensor])*
		public Group getGroup_5() { return cGroup_5; }
		
		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//sensors+=[Sensor]
		public Assignment getSensorsAssignment_5_1() { return cSensorsAssignment_5_1; }
		
		//[Sensor]
		public CrossReference getSensorsSensorCrossReference_5_1_0() { return cSensorsSensorCrossReference_5_1_0; }
		
		//ID
		public RuleCall getSensorsSensorIDTerminalRuleCall_5_1_0_1() { return cSensorsSensorIDTerminalRuleCall_5_1_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class SensorGetMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sdu.IoT.SensorGetMethod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSensorGetMethodKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMethodAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMethodMethodParserRuleCall_1_0 = (RuleCall)cMethodAssignment_1.eContents().get(0);
		private final Keyword cForKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cTypeKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cTypeSensorTypeCrossReference_4_0 = (CrossReference)cTypeAssignment_4.eContents().get(0);
		private final RuleCall cTypeSensorTypeIDTerminalRuleCall_4_0_1 = (RuleCall)cTypeSensorTypeCrossReference_4_0.eContents().get(1);
		
		//SensorGetMethod:
		//	'SensorGetMethod' method=Method 'for' 'type' type=[SensorType];
		@Override public ParserRule getRule() { return rule; }
		
		//'SensorGetMethod' method=Method 'for' 'type' type=[SensorType]
		public Group getGroup() { return cGroup; }
		
		//'SensorGetMethod'
		public Keyword getSensorGetMethodKeyword_0() { return cSensorGetMethodKeyword_0; }
		
		//method=Method
		public Assignment getMethodAssignment_1() { return cMethodAssignment_1; }
		
		//Method
		public RuleCall getMethodMethodParserRuleCall_1_0() { return cMethodMethodParserRuleCall_1_0; }
		
		//'for'
		public Keyword getForKeyword_2() { return cForKeyword_2; }
		
		//'type'
		public Keyword getTypeKeyword_3() { return cTypeKeyword_3; }
		
		//type=[SensorType]
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }
		
		//[SensorType]
		public CrossReference getTypeSensorTypeCrossReference_4_0() { return cTypeSensorTypeCrossReference_4_0; }
		
		//ID
		public RuleCall getTypeSensorTypeIDTerminalRuleCall_4_0_1() { return cTypeSensorTypeIDTerminalRuleCall_4_0_1; }
	}
	public class MethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sdu.IoT.Method");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParametersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParametersIDTerminalRuleCall_2_0 = (RuleCall)cParametersAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cParametersAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cParametersIDTerminalRuleCall_3_1_0 = (RuleCall)cParametersAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Method:
		//	name=ID '(' parameters+=ID (',' parameters+=ID)* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '(' parameters+=ID (',' parameters+=ID)* ')'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//parameters+=ID
		public Assignment getParametersAssignment_2() { return cParametersAssignment_2; }
		
		//ID
		public RuleCall getParametersIDTerminalRuleCall_2_0() { return cParametersIDTerminalRuleCall_2_0; }
		
		//(',' parameters+=ID)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//parameters+=ID
		public Assignment getParametersAssignment_3_1() { return cParametersAssignment_3_1; }
		
		//ID
		public RuleCall getParametersIDTerminalRuleCall_3_1_0() { return cParametersIDTerminalRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class DeviceTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sdu.IoT.DeviceType");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//DeviceType:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class DeviceTypesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sdu.IoT.DeviceTypes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeviceTypesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypesDeviceTypeParserRuleCall_1_0 = (RuleCall)cTypesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTypesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTypesDeviceTypeParserRuleCall_2_1_0 = (RuleCall)cTypesAssignment_2_1.eContents().get(0);
		
		//DeviceTypes:
		//	'DeviceTypes' types+=DeviceType (',' types+=DeviceType)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'DeviceTypes' types+=DeviceType (',' types+=DeviceType)*
		public Group getGroup() { return cGroup; }
		
		//'DeviceTypes'
		public Keyword getDeviceTypesKeyword_0() { return cDeviceTypesKeyword_0; }
		
		//types+=DeviceType
		public Assignment getTypesAssignment_1() { return cTypesAssignment_1; }
		
		//DeviceType
		public RuleCall getTypesDeviceTypeParserRuleCall_1_0() { return cTypesDeviceTypeParserRuleCall_1_0; }
		
		//(',' types+=DeviceType)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//types+=DeviceType
		public Assignment getTypesAssignment_2_1() { return cTypesAssignment_2_1; }
		
		//DeviceType
		public RuleCall getTypesDeviceTypeParserRuleCall_2_1_0() { return cTypesDeviceTypeParserRuleCall_2_1_0; }
	}
	public class DeviceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sdu.IoT.Device");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeviceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cOfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypeDeviceTypeCrossReference_2_0 = (CrossReference)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeDeviceTypeIDTerminalRuleCall_2_0_1 = (RuleCall)cTypeDeviceTypeCrossReference_2_0.eContents().get(1);
		private final Keyword cContainsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cGroupAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cGroupSensorGroupCrossReference_4_0 = (CrossReference)cGroupAssignment_4.eContents().get(0);
		private final RuleCall cGroupSensorGroupIDTerminalRuleCall_4_0_1 = (RuleCall)cGroupSensorGroupCrossReference_4_0.eContents().get(1);
		
		//Device:
		//	'Device' 'of' type=[DeviceType] 'contains' group=[SensorGroup];
		@Override public ParserRule getRule() { return rule; }
		
		//'Device' 'of' type=[DeviceType] 'contains' group=[SensorGroup]
		public Group getGroup() { return cGroup; }
		
		//'Device'
		public Keyword getDeviceKeyword_0() { return cDeviceKeyword_0; }
		
		//'of'
		public Keyword getOfKeyword_1() { return cOfKeyword_1; }
		
		//type=[DeviceType]
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//[DeviceType]
		public CrossReference getTypeDeviceTypeCrossReference_2_0() { return cTypeDeviceTypeCrossReference_2_0; }
		
		//ID
		public RuleCall getTypeDeviceTypeIDTerminalRuleCall_2_0_1() { return cTypeDeviceTypeIDTerminalRuleCall_2_0_1; }
		
		//'contains'
		public Keyword getContainsKeyword_3() { return cContainsKeyword_3; }
		
		//group=[SensorGroup]
		public Assignment getGroupAssignment_4() { return cGroupAssignment_4; }
		
		//[SensorGroup]
		public CrossReference getGroupSensorGroupCrossReference_4_0() { return cGroupSensorGroupCrossReference_4_0; }
		
		//ID
		public RuleCall getGroupSensorGroupIDTerminalRuleCall_4_0_1() { return cGroupSensorGroupIDTerminalRuleCall_4_0_1; }
	}
	public class DeviceGroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sdu.IoT.DeviceGroup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeviceGroupKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cIncludeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDevicesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cDevicesDeviceCrossReference_4_0 = (CrossReference)cDevicesAssignment_4.eContents().get(0);
		private final RuleCall cDevicesDeviceIDTerminalRuleCall_4_0_1 = (RuleCall)cDevicesDeviceCrossReference_4_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cDevicesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cDevicesDeviceCrossReference_5_1_0 = (CrossReference)cDevicesAssignment_5_1.eContents().get(0);
		private final RuleCall cDevicesDeviceIDTerminalRuleCall_5_1_0_1 = (RuleCall)cDevicesDeviceCrossReference_5_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//DeviceGroup:
		//	'DeviceGroup' name=ID 'include' '{' devices+=[Device] (',' devices+=[Device])* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'DeviceGroup' name=ID 'include' '{' devices+=[Device] (',' devices+=[Device])* '}'
		public Group getGroup() { return cGroup; }
		
		//'DeviceGroup'
		public Keyword getDeviceGroupKeyword_0() { return cDeviceGroupKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'include'
		public Keyword getIncludeKeyword_2() { return cIncludeKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//devices+=[Device]
		public Assignment getDevicesAssignment_4() { return cDevicesAssignment_4; }
		
		//[Device]
		public CrossReference getDevicesDeviceCrossReference_4_0() { return cDevicesDeviceCrossReference_4_0; }
		
		//ID
		public RuleCall getDevicesDeviceIDTerminalRuleCall_4_0_1() { return cDevicesDeviceIDTerminalRuleCall_4_0_1; }
		
		//(',' devices+=[Device])*
		public Group getGroup_5() { return cGroup_5; }
		
		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//devices+=[Device]
		public Assignment getDevicesAssignment_5_1() { return cDevicesAssignment_5_1; }
		
		//[Device]
		public CrossReference getDevicesDeviceCrossReference_5_1_0() { return cDevicesDeviceCrossReference_5_1_0; }
		
		//ID
		public RuleCall getDevicesDeviceIDTerminalRuleCall_5_1_0_1() { return cDevicesDeviceIDTerminalRuleCall_5_1_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class ServerTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sdu.IoT.ServerType");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//ServerType:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class ServerTypesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sdu.IoT.ServerTypes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cServerTypesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypesServerTypeParserRuleCall_1_0 = (RuleCall)cTypesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTypesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTypesServerTypeParserRuleCall_2_1_0 = (RuleCall)cTypesAssignment_2_1.eContents().get(0);
		
		//ServerTypes:
		//	'ServerTypes' types+=ServerType (',' types+=ServerType)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'ServerTypes' types+=ServerType (',' types+=ServerType)*
		public Group getGroup() { return cGroup; }
		
		//'ServerTypes'
		public Keyword getServerTypesKeyword_0() { return cServerTypesKeyword_0; }
		
		//types+=ServerType
		public Assignment getTypesAssignment_1() { return cTypesAssignment_1; }
		
		//ServerType
		public RuleCall getTypesServerTypeParserRuleCall_1_0() { return cTypesServerTypeParserRuleCall_1_0; }
		
		//(',' types+=ServerType)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//types+=ServerType
		public Assignment getTypesAssignment_2_1() { return cTypesAssignment_2_1; }
		
		//ServerType
		public RuleCall getTypesServerTypeParserRuleCall_2_1_0() { return cTypesServerTypeParserRuleCall_2_1_0; }
	}
	public class ServerFromTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sdu.IoT.ServerFromType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cServerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cOfKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTypeServerTypeCrossReference_3_0 = (CrossReference)cTypeAssignment_3.eContents().get(0);
		private final RuleCall cTypeServerTypeIDTerminalRuleCall_3_0_1 = (RuleCall)cTypeServerTypeCrossReference_3_0.eContents().get(1);
		
		//ServerFromType:
		//	'Server' name=ID 'of' type=[ServerType];
		@Override public ParserRule getRule() { return rule; }
		
		//'Server' name=ID 'of' type=[ServerType]
		public Group getGroup() { return cGroup; }
		
		//'Server'
		public Keyword getServerKeyword_0() { return cServerKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'of'
		public Keyword getOfKeyword_2() { return cOfKeyword_2; }
		
		//type=[ServerType]
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//[ServerType]
		public CrossReference getTypeServerTypeCrossReference_3_0() { return cTypeServerTypeCrossReference_3_0; }
		
		//ID
		public RuleCall getTypeServerTypeIDTerminalRuleCall_3_0_1() { return cTypeServerTypeIDTerminalRuleCall_3_0_1; }
	}
	public class ServerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sdu.IoT.Server");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cServerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cListensKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cIpKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cOnKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cLipAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cLipPortnumberParserRuleCall_5_0 = (RuleCall)cLipAssignment_5.eContents().get(0);
		private final Keyword cSendsKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cIpKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cOnKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cSipAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cSipPortnumberParserRuleCall_9_0 = (RuleCall)cSipAssignment_9.eContents().get(0);
		private final Keyword cContainsKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cGroupAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final CrossReference cGroupDeviceGroupCrossReference_11_0 = (CrossReference)cGroupAssignment_11.eContents().get(0);
		private final RuleCall cGroupDeviceGroupIDTerminalRuleCall_11_0_1 = (RuleCall)cGroupDeviceGroupCrossReference_11_0.eContents().get(1);
		
		//Server:
		//	'Server' name=ID 'listens' 'ip' 'on' lip=Portnumber 'sends' 'ip' 'on' sip=Portnumber 'contains' group=[DeviceGroup];
		@Override public ParserRule getRule() { return rule; }
		
		//'Server' name=ID 'listens' 'ip' 'on' lip=Portnumber 'sends' 'ip' 'on' sip=Portnumber 'contains' group=[DeviceGroup]
		public Group getGroup() { return cGroup; }
		
		//'Server'
		public Keyword getServerKeyword_0() { return cServerKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'listens'
		public Keyword getListensKeyword_2() { return cListensKeyword_2; }
		
		//'ip'
		public Keyword getIpKeyword_3() { return cIpKeyword_3; }
		
		//'on'
		public Keyword getOnKeyword_4() { return cOnKeyword_4; }
		
		//lip=Portnumber
		public Assignment getLipAssignment_5() { return cLipAssignment_5; }
		
		//Portnumber
		public RuleCall getLipPortnumberParserRuleCall_5_0() { return cLipPortnumberParserRuleCall_5_0; }
		
		//'sends'
		public Keyword getSendsKeyword_6() { return cSendsKeyword_6; }
		
		//'ip'
		public Keyword getIpKeyword_7() { return cIpKeyword_7; }
		
		//'on'
		public Keyword getOnKeyword_8() { return cOnKeyword_8; }
		
		//sip=Portnumber
		public Assignment getSipAssignment_9() { return cSipAssignment_9; }
		
		//Portnumber
		public RuleCall getSipPortnumberParserRuleCall_9_0() { return cSipPortnumberParserRuleCall_9_0; }
		
		//'contains'
		public Keyword getContainsKeyword_10() { return cContainsKeyword_10; }
		
		//group=[DeviceGroup]
		public Assignment getGroupAssignment_11() { return cGroupAssignment_11; }
		
		//[DeviceGroup]
		public CrossReference getGroupDeviceGroupCrossReference_11_0() { return cGroupDeviceGroupCrossReference_11_0; }
		
		//ID
		public RuleCall getGroupDeviceGroupIDTerminalRuleCall_11_0_1() { return cGroupDeviceGroupIDTerminalRuleCall_11_0_1; }
	}
	public class DestinationTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sdu.IoT.DestinationType");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//DestinationType:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class DestinationTypesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sdu.IoT.DestinationTypes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDestinationTypesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypesDestinationTypeParserRuleCall_1_0 = (RuleCall)cTypesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTypesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTypesDestinationTypeParserRuleCall_2_1_0 = (RuleCall)cTypesAssignment_2_1.eContents().get(0);
		
		//DestinationTypes:
		//	'DestinationTypes' types+=DestinationType (',' types+=DestinationType)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'DestinationTypes' types+=DestinationType (',' types+=DestinationType)*
		public Group getGroup() { return cGroup; }
		
		//'DestinationTypes'
		public Keyword getDestinationTypesKeyword_0() { return cDestinationTypesKeyword_0; }
		
		//types+=DestinationType
		public Assignment getTypesAssignment_1() { return cTypesAssignment_1; }
		
		//DestinationType
		public RuleCall getTypesDestinationTypeParserRuleCall_1_0() { return cTypesDestinationTypeParserRuleCall_1_0; }
		
		//(',' types+=DestinationType)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//types+=DestinationType
		public Assignment getTypesAssignment_2_1() { return cTypesAssignment_2_1; }
		
		//DestinationType
		public RuleCall getTypesDestinationTypeParserRuleCall_2_1_0() { return cTypesDestinationTypeParserRuleCall_2_1_0; }
	}
	public class DestinationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sdu.IoT.Destination");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDestinationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cOfKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTypeDestinationTypeCrossReference_3_0 = (CrossReference)cTypeAssignment_3.eContents().get(0);
		private final RuleCall cTypeDestinationTypeIDTerminalRuleCall_3_0_1 = (RuleCall)cTypeDestinationTypeCrossReference_3_0.eContents().get(1);
		
		//Destination:
		//	'Destination' name=ID 'of' type=[DestinationType];
		@Override public ParserRule getRule() { return rule; }
		
		//'Destination' name=ID 'of' type=[DestinationType]
		public Group getGroup() { return cGroup; }
		
		//'Destination'
		public Keyword getDestinationKeyword_0() { return cDestinationKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'of'
		public Keyword getOfKeyword_2() { return cOfKeyword_2; }
		
		//type=[DestinationType]
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//[DestinationType]
		public CrossReference getTypeDestinationTypeCrossReference_3_0() { return cTypeDestinationTypeCrossReference_3_0; }
		
		//ID
		public RuleCall getTypeDestinationTypeIDTerminalRuleCall_3_0_1() { return cTypeDestinationTypeIDTerminalRuleCall_3_0_1; }
	}
	public class FetchDataElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sdu.IoT.FetchData");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFetchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cDataKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cFromKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Keyword cTypeKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cFilterAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final CrossReference cFilterSensorTypeCrossReference_3_0_1_0 = (CrossReference)cFilterAssignment_3_0_1.eContents().get(0);
		private final RuleCall cFilterSensorTypeIDTerminalRuleCall_3_0_1_0_1 = (RuleCall)cFilterSensorTypeCrossReference_3_0_1_0.eContents().get(1);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Keyword cGroupKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cFilterAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final CrossReference cFilterSensorGroupCrossReference_3_1_1_0 = (CrossReference)cFilterAssignment_3_1_1.eContents().get(0);
		private final RuleCall cFilterSensorGroupIDTerminalRuleCall_3_1_1_0_1 = (RuleCall)cFilterSensorGroupCrossReference_3_1_1_0.eContents().get(1);
		private final Keyword cToKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cAlternatives_5.eContents().get(0);
		private final Keyword cDestinationKeyword_5_0_0 = (Keyword)cGroup_5_0.eContents().get(0);
		private final Assignment cDestinationAssignment_5_0_1 = (Assignment)cGroup_5_0.eContents().get(1);
		private final CrossReference cDestinationDestinationCrossReference_5_0_1_0 = (CrossReference)cDestinationAssignment_5_0_1.eContents().get(0);
		private final RuleCall cDestinationDestinationIDTerminalRuleCall_5_0_1_0_1 = (RuleCall)cDestinationDestinationCrossReference_5_0_1_0.eContents().get(1);
		private final Group cGroup_5_1 = (Group)cAlternatives_5.eContents().get(1);
		private final Keyword cServerKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cDestinationAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final CrossReference cDestinationServerCrossReference_5_1_1_0 = (CrossReference)cDestinationAssignment_5_1_1.eContents().get(0);
		private final RuleCall cDestinationServerIDTerminalRuleCall_5_1_1_0_1 = (RuleCall)cDestinationServerCrossReference_5_1_1_0.eContents().get(1);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final Assignment cConExpAssignment_6_0 = (Assignment)cAlternatives_6.eContents().get(0);
		private final RuleCall cConExpFetchDataExpressionParserRuleCall_6_0_0 = (RuleCall)cConExpAssignment_6_0.eContents().get(0);
		private final Assignment cConExpAssignment_6_1 = (Assignment)cAlternatives_6.eContents().get(1);
		private final RuleCall cConExpFetchDataConditionParserRuleCall_6_1_0 = (RuleCall)cConExpAssignment_6_1.eContents().get(0);
		
		//FetchData:
		//	'Fetch' 'data' 'from' ('type' filter=[SensorType] | 'group' filter=[SensorGroup]) 'to' ('destination'
		//	destination=[Destination] | 'server' destination=[Server]) (conExp=FetchDataExpression | conExp=FetchDataCondition)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'Fetch' 'data' 'from' ('type' filter=[SensorType] | 'group' filter=[SensorGroup]) 'to' ('destination'
		//destination=[Destination] | 'server' destination=[Server]) (conExp=FetchDataExpression | conExp=FetchDataCondition)?
		public Group getGroup() { return cGroup; }
		
		//'Fetch'
		public Keyword getFetchKeyword_0() { return cFetchKeyword_0; }
		
		//'data'
		public Keyword getDataKeyword_1() { return cDataKeyword_1; }
		
		//'from'
		public Keyword getFromKeyword_2() { return cFromKeyword_2; }
		
		//'type' filter=[SensorType] | 'group' filter=[SensorGroup]
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//'type' filter=[SensorType]
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//'type'
		public Keyword getTypeKeyword_3_0_0() { return cTypeKeyword_3_0_0; }
		
		//filter=[SensorType]
		public Assignment getFilterAssignment_3_0_1() { return cFilterAssignment_3_0_1; }
		
		//[SensorType]
		public CrossReference getFilterSensorTypeCrossReference_3_0_1_0() { return cFilterSensorTypeCrossReference_3_0_1_0; }
		
		//ID
		public RuleCall getFilterSensorTypeIDTerminalRuleCall_3_0_1_0_1() { return cFilterSensorTypeIDTerminalRuleCall_3_0_1_0_1; }
		
		//'group' filter=[SensorGroup]
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'group'
		public Keyword getGroupKeyword_3_1_0() { return cGroupKeyword_3_1_0; }
		
		//filter=[SensorGroup]
		public Assignment getFilterAssignment_3_1_1() { return cFilterAssignment_3_1_1; }
		
		//[SensorGroup]
		public CrossReference getFilterSensorGroupCrossReference_3_1_1_0() { return cFilterSensorGroupCrossReference_3_1_1_0; }
		
		//ID
		public RuleCall getFilterSensorGroupIDTerminalRuleCall_3_1_1_0_1() { return cFilterSensorGroupIDTerminalRuleCall_3_1_1_0_1; }
		
		//'to'
		public Keyword getToKeyword_4() { return cToKeyword_4; }
		
		//'destination' destination=[Destination] | 'server' destination=[Server]
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//'destination' destination=[Destination]
		public Group getGroup_5_0() { return cGroup_5_0; }
		
		//'destination'
		public Keyword getDestinationKeyword_5_0_0() { return cDestinationKeyword_5_0_0; }
		
		//destination=[Destination]
		public Assignment getDestinationAssignment_5_0_1() { return cDestinationAssignment_5_0_1; }
		
		//[Destination]
		public CrossReference getDestinationDestinationCrossReference_5_0_1_0() { return cDestinationDestinationCrossReference_5_0_1_0; }
		
		//ID
		public RuleCall getDestinationDestinationIDTerminalRuleCall_5_0_1_0_1() { return cDestinationDestinationIDTerminalRuleCall_5_0_1_0_1; }
		
		//'server' destination=[Server]
		public Group getGroup_5_1() { return cGroup_5_1; }
		
		//'server'
		public Keyword getServerKeyword_5_1_0() { return cServerKeyword_5_1_0; }
		
		//destination=[Server]
		public Assignment getDestinationAssignment_5_1_1() { return cDestinationAssignment_5_1_1; }
		
		//[Server]
		public CrossReference getDestinationServerCrossReference_5_1_1_0() { return cDestinationServerCrossReference_5_1_1_0; }
		
		//ID
		public RuleCall getDestinationServerIDTerminalRuleCall_5_1_1_0_1() { return cDestinationServerIDTerminalRuleCall_5_1_1_0_1; }
		
		//(conExp=FetchDataExpression | conExp=FetchDataCondition)?
		public Alternatives getAlternatives_6() { return cAlternatives_6; }
		
		//conExp=FetchDataExpression
		public Assignment getConExpAssignment_6_0() { return cConExpAssignment_6_0; }
		
		//FetchDataExpression
		public RuleCall getConExpFetchDataExpressionParserRuleCall_6_0_0() { return cConExpFetchDataExpressionParserRuleCall_6_0_0; }
		
		//conExp=FetchDataCondition
		public Assignment getConExpAssignment_6_1() { return cConExpAssignment_6_1; }
		
		//FetchDataCondition
		public RuleCall getConExpFetchDataConditionParserRuleCall_6_1_0() { return cConExpFetchDataConditionParserRuleCall_6_1_0; }
	}
	public class FetchDataExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sdu.IoT.FetchDataExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEveryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDurationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDurationTimeParserRuleCall_1_0 = (RuleCall)cDurationAssignment_1.eContents().get(0);
		private final Assignment cTimeUnitAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTimeUnitTimeUnitParserRuleCall_2_0 = (RuleCall)cTimeUnitAssignment_2.eContents().get(0);
		
		//FetchDataExpression:
		//	'every' duration=Time timeUnit=TimeUnit;
		@Override public ParserRule getRule() { return rule; }
		
		//'every' duration=Time timeUnit=TimeUnit
		public Group getGroup() { return cGroup; }
		
		//'every'
		public Keyword getEveryKeyword_0() { return cEveryKeyword_0; }
		
		//duration=Time
		public Assignment getDurationAssignment_1() { return cDurationAssignment_1; }
		
		//Time
		public RuleCall getDurationTimeParserRuleCall_1_0() { return cDurationTimeParserRuleCall_1_0; }
		
		//timeUnit=TimeUnit
		public Assignment getTimeUnitAssignment_2() { return cTimeUnitAssignment_2; }
		
		//TimeUnit
		public RuleCall getTimeUnitTimeUnitParserRuleCall_2_0() { return cTimeUnitTimeUnitParserRuleCall_2_0; }
	}
	public class FetchDataConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sdu.IoT.FetchDataCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cWhenKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cIfKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionConditionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		
		//FetchDataCondition:
		//	('when' | 'if') condition=Condition;
		@Override public ParserRule getRule() { return rule; }
		
		//('when' | 'if') condition=Condition
		public Group getGroup() { return cGroup; }
		
		//'when' | 'if'
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'when'
		public Keyword getWhenKeyword_0_0() { return cWhenKeyword_0_0; }
		
		//'if'
		public Keyword getIfKeyword_0_1() { return cIfKeyword_0_1; }
		
		//condition=Condition
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }
		
		//Condition
		public RuleCall getConditionConditionParserRuleCall_1_0() { return cConditionConditionParserRuleCall_1_0; }
	}
	public class TimeUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sdu.IoT.TimeUnit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cMsKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cMKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cHKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//TimeUnit:
		//	'ms' | 's' | 'm' | 'h';
		@Override public ParserRule getRule() { return rule; }
		
		//'ms' | 's' | 'm' | 'h'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'ms'
		public Keyword getMsKeyword_0() { return cMsKeyword_0; }
		
		//'s'
		public Keyword getSKeyword_1() { return cSKeyword_1; }
		
		//'m'
		public Keyword getMKeyword_2() { return cMKeyword_2; }
		
		//'h'
		public Keyword getHKeyword_3() { return cHKeyword_3; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sdu.IoT.Condition");
		private final Keyword c_Keyword = (Keyword)rule.eContents().get(1);
		
		//Condition:
		//	'_??';
		@Override public ParserRule getRule() { return rule; }
		
		//'_??'
		public Keyword get_Keyword() { return c_Keyword; }
	}
	public class PortnumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sdu.IoT.Portnumber");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPortnumberAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNumberAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNumberNUMBERTerminalRuleCall_1_0 = (RuleCall)cNumberAssignment_1.eContents().get(0);
		
		//Portnumber:
		//	{Portnumber} number=NUMBER;
		@Override public ParserRule getRule() { return rule; }
		
		//{Portnumber} number=NUMBER
		public Group getGroup() { return cGroup; }
		
		//{Portnumber}
		public Action getPortnumberAction_0() { return cPortnumberAction_0; }
		
		//number=NUMBER
		public Assignment getNumberAssignment_1() { return cNumberAssignment_1; }
		
		//NUMBER
		public RuleCall getNumberNUMBERTerminalRuleCall_1_0() { return cNumberNUMBERTerminalRuleCall_1_0; }
	}
	public class TimeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sdu.IoT.Time");
		private final Assignment cTimeAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTimeNUMBERTerminalRuleCall_0 = (RuleCall)cTimeAssignment.eContents().get(0);
		
		//Time:
		//	time=NUMBER;
		@Override public ParserRule getRule() { return rule; }
		
		//time=NUMBER
		public Assignment getTimeAssignment() { return cTimeAssignment; }
		
		//NUMBER
		public RuleCall getTimeNUMBERTerminalRuleCall_0() { return cTimeNUMBERTerminalRuleCall_0; }
	}
	
	
	private final SystemElements pSystem;
	private final SensorTypeElements pSensorType;
	private final SensorTypesElements pSensorTypes;
	private final SensorElements pSensor;
	private final SensorGroupElements pSensorGroup;
	private final SensorGetMethodElements pSensorGetMethod;
	private final MethodElements pMethod;
	private final DeviceTypeElements pDeviceType;
	private final DeviceTypesElements pDeviceTypes;
	private final DeviceElements pDevice;
	private final DeviceGroupElements pDeviceGroup;
	private final ServerTypeElements pServerType;
	private final ServerTypesElements pServerTypes;
	private final ServerFromTypeElements pServerFromType;
	private final ServerElements pServer;
	private final DestinationTypeElements pDestinationType;
	private final DestinationTypesElements pDestinationTypes;
	private final DestinationElements pDestination;
	private final FetchDataElements pFetchData;
	private final FetchDataExpressionElements pFetchDataExpression;
	private final FetchDataConditionElements pFetchDataCondition;
	private final TimeUnitElements pTimeUnit;
	private final ConditionElements pCondition;
	private final PortnumberElements pPortnumber;
	private final TimeElements pTime;
	private final TerminalRule tNUMBER;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public IoTGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pSystem = new SystemElements();
		this.pSensorType = new SensorTypeElements();
		this.pSensorTypes = new SensorTypesElements();
		this.pSensor = new SensorElements();
		this.pSensorGroup = new SensorGroupElements();
		this.pSensorGetMethod = new SensorGetMethodElements();
		this.pMethod = new MethodElements();
		this.pDeviceType = new DeviceTypeElements();
		this.pDeviceTypes = new DeviceTypesElements();
		this.pDevice = new DeviceElements();
		this.pDeviceGroup = new DeviceGroupElements();
		this.pServerType = new ServerTypeElements();
		this.pServerTypes = new ServerTypesElements();
		this.pServerFromType = new ServerFromTypeElements();
		this.pServer = new ServerElements();
		this.pDestinationType = new DestinationTypeElements();
		this.pDestinationTypes = new DestinationTypesElements();
		this.pDestination = new DestinationElements();
		this.pFetchData = new FetchDataElements();
		this.pFetchDataExpression = new FetchDataExpressionElements();
		this.pFetchDataCondition = new FetchDataConditionElements();
		this.pTimeUnit = new TimeUnitElements();
		this.pCondition = new ConditionElements();
		this.pPortnumber = new PortnumberElements();
		this.pTime = new TimeElements();
		this.tNUMBER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.sdu.IoT.NUMBER");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.sdu.IoT".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//System:
	//	system+=(SensorTypes | Sensor | SensorGroup | SensorGetMethod | DeviceTypes | Device | DeviceGroup | ServerTypes |
	//	ServerFromType | Server | DestinationTypes | Destination | FetchData)+;
	public SystemElements getSystemAccess() {
		return pSystem;
	}
	
	public ParserRule getSystemRule() {
		return getSystemAccess().getRule();
	}
	
	//SensorType:
	//	name=ID;
	public SensorTypeElements getSensorTypeAccess() {
		return pSensorType;
	}
	
	public ParserRule getSensorTypeRule() {
		return getSensorTypeAccess().getRule();
	}
	
	//SensorTypes:
	//	'SensorTypes' types+=SensorType (',' types+=SensorType)*;
	public SensorTypesElements getSensorTypesAccess() {
		return pSensorTypes;
	}
	
	public ParserRule getSensorTypesRule() {
		return getSensorTypesAccess().getRule();
	}
	
	//Sensor:
	//	'Sensor' name=ID 'of' 'type' type=[SensorType];
	public SensorElements getSensorAccess() {
		return pSensor;
	}
	
	public ParserRule getSensorRule() {
		return getSensorAccess().getRule();
	}
	
	//SensorGroup:
	//	'SensorGroup' name=ID 'include' '{' sensors+=[Sensor] (',' sensors+=[Sensor])* '}';
	public SensorGroupElements getSensorGroupAccess() {
		return pSensorGroup;
	}
	
	public ParserRule getSensorGroupRule() {
		return getSensorGroupAccess().getRule();
	}
	
	//SensorGetMethod:
	//	'SensorGetMethod' method=Method 'for' 'type' type=[SensorType];
	public SensorGetMethodElements getSensorGetMethodAccess() {
		return pSensorGetMethod;
	}
	
	public ParserRule getSensorGetMethodRule() {
		return getSensorGetMethodAccess().getRule();
	}
	
	//Method:
	//	name=ID '(' parameters+=ID (',' parameters+=ID)* ')';
	public MethodElements getMethodAccess() {
		return pMethod;
	}
	
	public ParserRule getMethodRule() {
		return getMethodAccess().getRule();
	}
	
	//DeviceType:
	//	name=ID;
	public DeviceTypeElements getDeviceTypeAccess() {
		return pDeviceType;
	}
	
	public ParserRule getDeviceTypeRule() {
		return getDeviceTypeAccess().getRule();
	}
	
	//DeviceTypes:
	//	'DeviceTypes' types+=DeviceType (',' types+=DeviceType)*;
	public DeviceTypesElements getDeviceTypesAccess() {
		return pDeviceTypes;
	}
	
	public ParserRule getDeviceTypesRule() {
		return getDeviceTypesAccess().getRule();
	}
	
	//Device:
	//	'Device' 'of' type=[DeviceType] 'contains' group=[SensorGroup];
	public DeviceElements getDeviceAccess() {
		return pDevice;
	}
	
	public ParserRule getDeviceRule() {
		return getDeviceAccess().getRule();
	}
	
	//DeviceGroup:
	//	'DeviceGroup' name=ID 'include' '{' devices+=[Device] (',' devices+=[Device])* '}';
	public DeviceGroupElements getDeviceGroupAccess() {
		return pDeviceGroup;
	}
	
	public ParserRule getDeviceGroupRule() {
		return getDeviceGroupAccess().getRule();
	}
	
	//ServerType:
	//	name=ID;
	public ServerTypeElements getServerTypeAccess() {
		return pServerType;
	}
	
	public ParserRule getServerTypeRule() {
		return getServerTypeAccess().getRule();
	}
	
	//ServerTypes:
	//	'ServerTypes' types+=ServerType (',' types+=ServerType)*;
	public ServerTypesElements getServerTypesAccess() {
		return pServerTypes;
	}
	
	public ParserRule getServerTypesRule() {
		return getServerTypesAccess().getRule();
	}
	
	//ServerFromType:
	//	'Server' name=ID 'of' type=[ServerType];
	public ServerFromTypeElements getServerFromTypeAccess() {
		return pServerFromType;
	}
	
	public ParserRule getServerFromTypeRule() {
		return getServerFromTypeAccess().getRule();
	}
	
	//Server:
	//	'Server' name=ID 'listens' 'ip' 'on' lip=Portnumber 'sends' 'ip' 'on' sip=Portnumber 'contains' group=[DeviceGroup];
	public ServerElements getServerAccess() {
		return pServer;
	}
	
	public ParserRule getServerRule() {
		return getServerAccess().getRule();
	}
	
	//DestinationType:
	//	name=ID;
	public DestinationTypeElements getDestinationTypeAccess() {
		return pDestinationType;
	}
	
	public ParserRule getDestinationTypeRule() {
		return getDestinationTypeAccess().getRule();
	}
	
	//DestinationTypes:
	//	'DestinationTypes' types+=DestinationType (',' types+=DestinationType)*;
	public DestinationTypesElements getDestinationTypesAccess() {
		return pDestinationTypes;
	}
	
	public ParserRule getDestinationTypesRule() {
		return getDestinationTypesAccess().getRule();
	}
	
	//Destination:
	//	'Destination' name=ID 'of' type=[DestinationType];
	public DestinationElements getDestinationAccess() {
		return pDestination;
	}
	
	public ParserRule getDestinationRule() {
		return getDestinationAccess().getRule();
	}
	
	//FetchData:
	//	'Fetch' 'data' 'from' ('type' filter=[SensorType] | 'group' filter=[SensorGroup]) 'to' ('destination'
	//	destination=[Destination] | 'server' destination=[Server]) (conExp=FetchDataExpression | conExp=FetchDataCondition)?;
	public FetchDataElements getFetchDataAccess() {
		return pFetchData;
	}
	
	public ParserRule getFetchDataRule() {
		return getFetchDataAccess().getRule();
	}
	
	//FetchDataExpression:
	//	'every' duration=Time timeUnit=TimeUnit;
	public FetchDataExpressionElements getFetchDataExpressionAccess() {
		return pFetchDataExpression;
	}
	
	public ParserRule getFetchDataExpressionRule() {
		return getFetchDataExpressionAccess().getRule();
	}
	
	//FetchDataCondition:
	//	('when' | 'if') condition=Condition;
	public FetchDataConditionElements getFetchDataConditionAccess() {
		return pFetchDataCondition;
	}
	
	public ParserRule getFetchDataConditionRule() {
		return getFetchDataConditionAccess().getRule();
	}
	
	//TimeUnit:
	//	'ms' | 's' | 'm' | 'h';
	public TimeUnitElements getTimeUnitAccess() {
		return pTimeUnit;
	}
	
	public ParserRule getTimeUnitRule() {
		return getTimeUnitAccess().getRule();
	}
	
	//Condition:
	//	'_??';
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//Portnumber:
	//	{Portnumber} number=NUMBER;
	public PortnumberElements getPortnumberAccess() {
		return pPortnumber;
	}
	
	public ParserRule getPortnumberRule() {
		return getPortnumberAccess().getRule();
	}
	
	//Time:
	//	time=NUMBER;
	public TimeElements getTimeAccess() {
		return pTime;
	}
	
	public ParserRule getTimeRule() {
		return getTimeAccess().getRule();
	}
	
	//terminal NUMBER:
	//	INT+;
	public TerminalRule getNUMBERRule() {
		return tNUMBER;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
