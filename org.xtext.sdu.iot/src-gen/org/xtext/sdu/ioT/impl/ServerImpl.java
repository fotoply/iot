/**
 * generated by Xtext 2.17.0
 */
package org.xtext.sdu.ioT.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.sdu.ioT.DeviceGroup;
import org.xtext.sdu.ioT.IoTPackage;
import org.xtext.sdu.ioT.Portnumber;
import org.xtext.sdu.ioT.Server;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Server</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.sdu.ioT.impl.ServerImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.xtext.sdu.ioT.impl.ServerImpl#getLip <em>Lip</em>}</li>
 *   <li>{@link org.xtext.sdu.ioT.impl.ServerImpl#getSip <em>Sip</em>}</li>
 *   <li>{@link org.xtext.sdu.ioT.impl.ServerImpl#getGroup <em>Group</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ServerImpl extends MinimalEObjectImpl.Container implements Server
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getLip() <em>Lip</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLip()
   * @generated
   * @ordered
   */
  protected Portnumber lip;

  /**
   * The cached value of the '{@link #getSip() <em>Sip</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSip()
   * @generated
   * @ordered
   */
  protected Portnumber sip;

  /**
   * The cached value of the '{@link #getGroup() <em>Group</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGroup()
   * @generated
   * @ordered
   */
  protected DeviceGroup group;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ServerImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return IoTPackage.Literals.SERVER;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, IoTPackage.SERVER__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Portnumber getLip()
  {
    return lip;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLip(Portnumber newLip, NotificationChain msgs)
  {
    Portnumber oldLip = lip;
    lip = newLip;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, IoTPackage.SERVER__LIP, oldLip, newLip);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLip(Portnumber newLip)
  {
    if (newLip != lip)
    {
      NotificationChain msgs = null;
      if (lip != null)
        msgs = ((InternalEObject)lip).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - IoTPackage.SERVER__LIP, null, msgs);
      if (newLip != null)
        msgs = ((InternalEObject)newLip).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - IoTPackage.SERVER__LIP, null, msgs);
      msgs = basicSetLip(newLip, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, IoTPackage.SERVER__LIP, newLip, newLip));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Portnumber getSip()
  {
    return sip;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSip(Portnumber newSip, NotificationChain msgs)
  {
    Portnumber oldSip = sip;
    sip = newSip;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, IoTPackage.SERVER__SIP, oldSip, newSip);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSip(Portnumber newSip)
  {
    if (newSip != sip)
    {
      NotificationChain msgs = null;
      if (sip != null)
        msgs = ((InternalEObject)sip).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - IoTPackage.SERVER__SIP, null, msgs);
      if (newSip != null)
        msgs = ((InternalEObject)newSip).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - IoTPackage.SERVER__SIP, null, msgs);
      msgs = basicSetSip(newSip, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, IoTPackage.SERVER__SIP, newSip, newSip));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DeviceGroup getGroup()
  {
    if (group != null && group.eIsProxy())
    {
      InternalEObject oldGroup = (InternalEObject)group;
      group = (DeviceGroup)eResolveProxy(oldGroup);
      if (group != oldGroup)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, IoTPackage.SERVER__GROUP, oldGroup, group));
      }
    }
    return group;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DeviceGroup basicGetGroup()
  {
    return group;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setGroup(DeviceGroup newGroup)
  {
    DeviceGroup oldGroup = group;
    group = newGroup;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, IoTPackage.SERVER__GROUP, oldGroup, group));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case IoTPackage.SERVER__LIP:
        return basicSetLip(null, msgs);
      case IoTPackage.SERVER__SIP:
        return basicSetSip(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case IoTPackage.SERVER__NAME:
        return getName();
      case IoTPackage.SERVER__LIP:
        return getLip();
      case IoTPackage.SERVER__SIP:
        return getSip();
      case IoTPackage.SERVER__GROUP:
        if (resolve) return getGroup();
        return basicGetGroup();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case IoTPackage.SERVER__NAME:
        setName((String)newValue);
        return;
      case IoTPackage.SERVER__LIP:
        setLip((Portnumber)newValue);
        return;
      case IoTPackage.SERVER__SIP:
        setSip((Portnumber)newValue);
        return;
      case IoTPackage.SERVER__GROUP:
        setGroup((DeviceGroup)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case IoTPackage.SERVER__NAME:
        setName(NAME_EDEFAULT);
        return;
      case IoTPackage.SERVER__LIP:
        setLip((Portnumber)null);
        return;
      case IoTPackage.SERVER__SIP:
        setSip((Portnumber)null);
        return;
      case IoTPackage.SERVER__GROUP:
        setGroup((DeviceGroup)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case IoTPackage.SERVER__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case IoTPackage.SERVER__LIP:
        return lip != null;
      case IoTPackage.SERVER__SIP:
        return sip != null;
      case IoTPackage.SERVER__GROUP:
        return group != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //ServerImpl
