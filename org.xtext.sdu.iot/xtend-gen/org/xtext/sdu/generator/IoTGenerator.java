/**
 * generated by Xtext 2.17.0
 */
package org.xtext.sdu.generator;

import com.google.common.collect.Iterators;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.xtext.sdu.ioT.Device;
import org.xtext.sdu.ioT.DeviceType;
import org.xtext.sdu.ioT.DeviceTypes;
import org.xtext.sdu.ioT.Sensor;
import org.xtext.sdu.ioT.SensorGetMethod;
import org.xtext.sdu.ioT.SensorGroup;
import org.xtext.sdu.ioT.SensorType;
import org.xtext.sdu.ioT.SensorTypes;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class IoTGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    fsa.generateFile("system.py", this.generatePythonCode(resource));
  }
  
  protected CharSequence generatePythonCode(final Resource resourceRoot) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("#Autogenerated at ");
    String _string = new SimpleDateFormat("dd-MM-yyyy \'at\' HH:mm:ss").format(Calendar.getInstance().getTime()).toString();
    _builder.append(_string);
    _builder.append(" by EasyIoT");
    _builder.newLineIfNotEmpty();
    _builder.append("import pycom");
    _builder.newLine();
    _builder.append("import time");
    _builder.newLine();
    CharSequence _emitSensortypes = this.emitSensortypes(resourceRoot);
    _builder.append(_emitSensortypes);
    _builder.newLineIfNotEmpty();
    CharSequence _emitDevicetypes = this.emitDevicetypes(resourceRoot);
    _builder.append(_emitDevicetypes);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    CharSequence _emitSensors = this.emitSensors(resourceRoot);
    _builder.append(_emitSensors);
    CharSequence _emitDevices = this.emitDevices(resourceRoot);
    _builder.append(_emitDevices);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    CharSequence _emitSensorgroup = this.emitSensorgroup(resourceRoot);
    _builder.append(_emitSensorgroup);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    CharSequence _emitSensorGetMethod = this.emitSensorGetMethod(resourceRoot);
    _builder.append(_emitSensorGetMethod);
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence emitSensorGetMethod(final Resource resourceRoot) {
    StringConcatenation _builder = new StringConcatenation();
    {
      int _size = IteratorExtensions.size(Iterators.<SensorGetMethod>filter(resourceRoot.getAllContents(), SensorGetMethod.class));
      boolean _greaterThan = (_size > 0);
      if (_greaterThan) {
        _builder.append("getMethods = dict()");
        _builder.newLine();
      }
    }
    {
      Iterable<SensorGetMethod> _iterable = IteratorExtensions.<SensorGetMethod>toIterable(Iterators.<SensorGetMethod>filter(resourceRoot.getAllContents(), SensorGetMethod.class));
      for(final SensorGetMethod sensorGetMethod : _iterable) {
        _builder.append("getMethods[");
        String _name = sensorGetMethod.getType().getName();
        _builder.append(_name);
        _builder.append("_");
        String _name_1 = sensorGetMethod.getMethod().getName();
        _builder.append(_name_1);
        _builder.append("(");
        {
          EList<String> _parameters = sensorGetMethod.getMethod().getParameters();
          boolean _hasElements = false;
          for(final String parameter : _parameters) {
            if (!_hasElements) {
              _hasElements = true;
            } else {
              _builder.appendImmediate(",", "");
            }
            _builder.append(parameter);
          }
        }
        _builder.append(")] = getattr(");
        String _name_2 = sensorGetMethod.getType().getName();
        _builder.append(_name_2);
        _builder.append(",");
        String _name_3 = sensorGetMethod.getMethod().getName();
        _builder.append(_name_3);
        _builder.append("(");
        {
          EList<String> _parameters_1 = sensorGetMethod.getMethod().getParameters();
          boolean _hasElements_1 = false;
          for(final String parameter_1 : _parameters_1) {
            if (!_hasElements_1) {
              _hasElements_1 = true;
            } else {
              _builder.appendImmediate(",", "");
            }
            _builder.append(parameter_1);
          }
        }
        _builder.append("))");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  protected CharSequence emitSensorgroup(final Resource resourceRoot) {
    StringConcatenation _builder = new StringConcatenation();
    {
      Iterable<SensorGroup> _iterable = IteratorExtensions.<SensorGroup>toIterable(Iterators.<SensorGroup>filter(resourceRoot.getAllContents(), SensorGroup.class));
      for(final SensorGroup sensorGroup : _iterable) {
        _builder.newLineIfNotEmpty();
        String _name = sensorGroup.getName();
        _builder.append(_name);
        _builder.append(" = [");
        {
          EList<Sensor> _sensors = sensorGroup.getSensors();
          boolean _hasElements = false;
          for(final Sensor sensor : _sensors) {
            if (!_hasElements) {
              _hasElements = true;
            } else {
              _builder.appendImmediate(",", "");
            }
            String _name_1 = sensor.getName();
            _builder.append(_name_1);
          }
        }
        _builder.append("]");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  protected CharSequence emitSensors(final Resource resourceRoot) {
    StringConcatenation _builder = new StringConcatenation();
    {
      Iterable<Sensor> _iterable = IteratorExtensions.<Sensor>toIterable(Iterators.<Sensor>filter(resourceRoot.getAllContents(), Sensor.class));
      for(final Sensor sensor : _iterable) {
        _builder.newLineIfNotEmpty();
        String _name = sensor.getName();
        _builder.append(_name);
        _builder.append(" = ");
        String _name_1 = sensor.getType().getName();
        _builder.append(_name_1);
        _builder.append("()");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  protected CharSequence emitSensortypes(final Resource resourceRoot) {
    StringConcatenation _builder = new StringConcatenation();
    {
      Iterable<SensorTypes> _iterable = IteratorExtensions.<SensorTypes>toIterable(Iterators.<SensorTypes>filter(resourceRoot.getAllContents(), SensorTypes.class));
      for(final SensorTypes sensorTypes : _iterable) {
        _builder.newLineIfNotEmpty();
        {
          EList<SensorType> _types = sensorTypes.getTypes();
          for(final SensorType sensorType : _types) {
            CharSequence _importSensorLibrary = this.importSensorLibrary(sensorType);
            _builder.append(_importSensorLibrary);
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    return _builder;
  }
  
  protected CharSequence emitDevicetypes(final Resource resourceRoot) {
    StringConcatenation _builder = new StringConcatenation();
    {
      Iterable<DeviceTypes> _iterable = IteratorExtensions.<DeviceTypes>toIterable(Iterators.<DeviceTypes>filter(resourceRoot.getAllContents(), DeviceTypes.class));
      for(final DeviceTypes deviceTypes : _iterable) {
        _builder.newLineIfNotEmpty();
        {
          EList<DeviceType> _types = deviceTypes.getTypes();
          for(final DeviceType deviceType : _types) {
            CharSequence _importDeviceLibrary = this.importDeviceLibrary(deviceType);
            _builder.append(_importDeviceLibrary);
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    return _builder;
  }
  
  protected CharSequence emitDevices(final Resource resourceRoot) {
    StringConcatenation _builder = new StringConcatenation();
    {
      Iterable<Device> _iterable = IteratorExtensions.<Device>toIterable(Iterators.<Device>filter(resourceRoot.getAllContents(), Device.class));
      for(final Device device : _iterable) {
        _builder.newLineIfNotEmpty();
        String _name = device.getName();
        _builder.append(_name);
        _builder.append(" = ");
        String _name_1 = device.getType().getName();
        _builder.append(_name_1);
        _builder.append("()");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  protected CharSequence importSensorLibrary(final SensorType sensorType) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import ");
    String _name = sensorType.getName();
    _builder.append(_name);
    _builder.append(" from ");
    String _name_1 = sensorType.getName();
    _builder.append(_name_1);
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  protected CharSequence importDeviceLibrary(final DeviceType deviceType) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import ");
    String _name = deviceType.getName();
    _builder.append(_name);
    _builder.append(" from ");
    String _name_1 = deviceType.getName();
    _builder.append(_name_1);
    _builder.newLineIfNotEmpty();
    return _builder;
  }
}
