/*
 * generated by Xtext 2.17.0
 */
package org.xtext.sdu.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import org.eclipse.xtext.generator.InMemoryFileSystemAccess
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.generator.IFileSystemAccess
import org.xtext.sdu.generator.IoTGenerator

@ExtendWith(InjectionExtension)
@InjectWith(IoTInjectorProvider)
class IoTParsingTest {
	@Inject ParseHelper<org.xtext.sdu.ioT.System> parseHelper
	
	def baseImports() '''
	import pycom
	import time'''
	
	@Test
	def testSensorTypes() {
		val model = parseHelper.parse('''
        SensorTypes Ae, Be
        ''')
        val fsa = new InMemoryFileSystemAccess()
        
        val IoTGenerator = new IoTGenerator();
        IoTGenerator.doGenerate(model.eResource, fsa, null)
        Assertions.assertEquals(
        	'''
        	«baseImports»
        	import Ae from Ae
        	import Be from Be'''.toString,
        	fsa.allFiles.get(IFileSystemAccess::DEFAULT_OUTPUT+"system.py").toString.trim
        )
	}
	
	@Test
	def testSensors() {
		val model = parseHelper.parse('''
		SensorTypes Ab
        Sensor Se of type Ab
        ''')
        val fsa = new InMemoryFileSystemAccess()
        
        val IoTGenerator = new IoTGenerator();
        IoTGenerator.doGenerate(model.eResource, fsa, null)
        Assertions.assertEquals(
        	'''
        	«baseImports»
        	import Ab from Ab
        	
        	Se = Ab()'''.toString,
        	fsa.allFiles.get(IFileSystemAccess::DEFAULT_OUTPUT+"system.py").toString.trim
        )
	}
	
	@Test
	def testSensorGroups() {
		val model = parseHelper.parse('''
		SensorTypes Ab
		Sensor Se of type Ab
		Sensor De of type Ab
		SensorGroup Az include Se, De
        ''')
        val fsa = new InMemoryFileSystemAccess()
        
        val IoTGenerator = new IoTGenerator();
        IoTGenerator.doGenerate(model.eResource, fsa, null)
        Assertions.assertEquals(
        	'''
        	«baseImports»
        	import Ab from Ab
        	
        	Se = Ab()
        	De = Ab()
        	
        	Az = ["Se","De"]'''.toString,
        	fsa.allFiles.get(IFileSystemAccess::DEFAULT_OUTPUT+"system.py").toString.trim
        )
	}
	
	
	@Test
	def testDeviceTypes() {
		val model = parseHelper.parse('''
        DeviceTypes Ae, Be
        ''')
        val fsa = new InMemoryFileSystemAccess()
        
        val IoTGenerator = new IoTGenerator();
        IoTGenerator.doGenerate(model.eResource, fsa, null)
        Assertions.assertEquals(
        	'''
        	«baseImports»
        	import Ae from Ae
        	import Be from Be'''.toString,
        	fsa.allFiles.get(IFileSystemAccess::DEFAULT_OUTPUT+"system.py").toString.trim
        )
	}
	
	@Test
	def testDevices() {
		val model = parseHelper.parse('''
		DeviceTypes Ab
        Device Se of type Ab
        ''')
        val fsa = new InMemoryFileSystemAccess()
        
        val IoTGenerator = new IoTGenerator();
        IoTGenerator.doGenerate(model.eResource, fsa, null)
        Assertions.assertEquals(
        	'''
        	«baseImports»
        	import Ab from Ab
        	
        	Se = Ab()'''.toString,
        	fsa.allFiles.get(IFileSystemAccess::DEFAULT_OUTPUT+"system.py").toString.trim
        )
	}
	
	@Test
	def testDeviceGroups() {
		val model = parseHelper.parse('''
		DeviceTypes Ab
		Device Se of type Ab
		Device De of type Ab
		DeviceGroup Az include Se, De
        ''')
        val fsa = new InMemoryFileSystemAccess()
        
        val IoTGenerator = new IoTGenerator();
        IoTGenerator.doGenerate(model.eResource, fsa, null)
        Assertions.assertEquals(
        	'''
        	«baseImports»
        	import Ab from Ab
        	
        	Se = Ab()
        	De = Ab()
        	
        	Az = ["Se","De"]'''.toString,
        	fsa.allFiles.get(IFileSystemAccess::DEFAULT_OUTPUT+"system.py").toString.trim
        )
	}
}
